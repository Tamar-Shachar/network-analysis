import pymysql.err
from fastapi import HTTPException


def db_handler(func):
    def decorator_exception(*args, **kwargs):
        try:
            func(*args, **kwargs)
        # Raised for errors related to programming errors, such as SQL syntax errors or incorrect query parameters
        except pymysql.err.ProgrammingError as err:
            raise err
        # This exception represents warnings generated by the MySQL server
        except pymysql.err.Warning as err:
            raise err
        # Raised when a relational integrity constraint is violated, such as a foreign key constraint
        except pymysql.err.IntegrityError as err:
            raise err
        # Raised for internal MySQL errors that occur during execution
        except pymysql.err.InternalError as err:
            raise err
        # This exception is raised for operational errors, such as a connection that went bad during a query
        except pymysql.err.OperationalError as err:
            raise err
        # Raised when there are errors related to data processing, like incorrect data types or out-of-range values
        except pymysql.err.DataError as err:
            raise err
        # This exception is raised when there is an error in the MySQL Connector/Python interface, such as connection problems
        except pymysql.err.InterfaceError as err:
            raise err
        # Raised when an action is attempted that is not supported by the database or the pymysql library
        except pymysql.err.NotSupportedError as err:
            raise err
        # This is a general exception class for all errors related to the database
        except pymysql.err.DatabaseError as err:
            raise err
        # This is a generic exception raised for errors specific to the MySQL Connector/Python library. It is the base exception class for all MySQL Connector/Python errors36
        except pymysql.err.Error as err:
            raise err
        except Exception as ex:
            raise ex
        return decorator_exception

    return db_handler


def file_handler(func):
    def decorator_exception(*args, **kwargs):
        try:
            func(*args, **kwargs)
        except IOError as e:
            raise e
        except PermissionError as e:
            raise e
        except FileNotFoundError as err:
            raise err

        except Exception as ex:
            raise ex
        return decorator_exception

    return file_handler


def api_handler(func, status_code=404, detail="Item not found"):
    def decorator_exception(*args, **kwargs):
        try:
            func(*args, **kwargs)
        except HTTPException as ex:
            HTTPException(status_code=status_code, detail=detail)
        except Exception as ex:
            raise ex
        return decorator_exception

    return api_handler


def basic_exception_handler(func):
    def decorator_exception(*args, **kwargs):
        try:
            func(*args, **kwargs)
        except Exception as ex:
            raise ex
        return decorator_exception

    return basic_exception_handler
